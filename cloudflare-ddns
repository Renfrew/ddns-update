#!/bin/bash
#
# This is a Bash script to update a Cloudflare A record with the current external IP.
# The example below would update the local.example.com A record to the current external IP with a TTL of 5 minutes.
#
# Dependencies: jq, dig, curl
#
# The script will log to /var/log/me.renfrew.dnsUpdate.log and /var/log/me.renfrew.dnsUpdate.err
#
# Usage:
# cloudflare-ddns.sh <ACCESS_TOKEN> <DOMAIN> <SUBDOMAIN> <TTL>
#
# Example:
# cloudflare-ddns.sh aCcEFfdsOKeN example.com local 300
#

API="https://api.cloudflare.com/client/v4"
LOG_FILE=/var/log/me.renfrew.dnsUpdate
LOG_DIR=$(dirname $LOG_FILE)

IPv4_PATTERN='^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
IPv6_PATTERN='^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$'

# Check if the required parameters are passed
if [ "$#" -ne 4 ]; then
  echo "Wrong number of parameters passed"
  echo "Usage:"
  echo "    $0 <ACCESS_TOKEN> <DOMAIN> <SUBDOMAIN> <TTL>"
  exit
fi

ACCESS_TOKEN="$1"
DOMAIN="$2"
SUBDOMAIN="$3"
TTL="$4"

HOSTNAME="$SUBDOMAIN.$DOMAIN"

# Create log files if they don't exist and have the permission to write
if [[ ! -e "$LOG_FILE.log" && ! -e "$LOG_FILE.err" && -w "$LOG_DIR" ]]; then
    touch $LOG_FILE.log
    touch $LOG_FILE.err
fi

# Redirect stderr to log files if they have the permission to write
if [[ -w "$LOG_FILE.log" && -w "$LOG_FILE.err" ]]; then
  exec 2> >(tee -a $LOG_FILE.err $LOG_FILE.log)
else
  echo "Warning: Cannot write to log files in $LOG_DIR, please check the permissions"
fi

# Function to log to console and log file
# Usage: logger_own <LEVEL> <MESSAGE>
logger_own() {
  # Print to console
  echo $2

  # Log to log file
  if [[ -w "$LOG_FILE.log" ]]; then
    echo $(date '+%Y-%m-%d %H:%M:%S') [$1] $2 >> $LOG_FILE.log
  fi
}

# Get the current external IP of the host
# Usage: get_external_ip <4|6>
get_external_ip() {
  EXTERNAL_IP=$(dig @ns1.google.com -$1 o-o.myaddr.l.google.com TXT +short | jq '.' --raw-output)
  logger_own INFO "Current external IPv$1 is \"$EXTERNAL_IP\""
}

# Get the current IP resolved by the DNS
# Usage: get_current_ip <A|AAAA>
get_current_ip() {
  local TYPE=$([[ $1 == "AAAA" ]] && echo "28" || echo "1")
  CURRENT_IP=$(curl --silent \
    -H 'accept: application/dns-json' \
    "https://cloudflare-dns.com/dns-query?name=$HOSTNAME&type=$1" |
    jq -c ".Answer[]? | select(.type == $TYPE) | .data" --raw-output
  )

  logger_own INFO "Current $HOSTNAME type $1 DNS record is \"$CURRENT_IP\""
}

get_dns_records() {
  DNS_ZONES_RESPONSE=$(curl -s "$API/zones?status=active" --header "Authorization: Bearer $ACCESS_TOKEN" --header "Content-Type:application/json")
  if [[ $(echo $DNS_ZONES_RESPONSE | jq ".success" --raw-output) != "true" ]]; then
    logger_own ERROR "There was a problem fetching the DNS zones, response code was $(echo $DNS_ZONES_RESPONSE | jq '.errors[0] | .code' --raw-output)"
    exit
  fi

  ZONE_ID=$(echo $DNS_ZONES_RESPONSE | jq ".result[]  | select(.name == \"$DOMAIN\") | .id" --raw-output)
  DNS_RECORDS_RESPONSE=$(curl -s "$API/zones/$ZONE_ID/dns_records" --header "Authorization: Bearer $ACCESS_TOKEN" --header "Content-Type:application/json")
  if [[ $(echo $DNS_RECORDS_RESPONSE | jq ".success" --raw-output) != "true" ]]; then
    logger_own ERROR "There was a problem fetching the DNS records, response code was $(echo $DNS_RECORDS_RESPONSE | jq '.errors[0] | .code' --raw-output)"
    exit
  fi
}

# Update the IP if it has changed
# Usage: update_ip <4|6>
update_ip() {
  local TYPE=$([[ $1 == "6" ]] && echo "AAAA" || echo "A")

  get_current_ip $TYPE
  get_external_ip $1
  if [[ ! $EXTERNAL_IP =~ $IPv4_PATTERN && ! $EXTERNAL_IP =~ $IPv6_PATTERN ]]; then
    logger_own ERROR "There was a problem resolving the external type $TYPE IP, response was \"$EXTERNAL_IP\""
    return
  fi

  if [[ "$CURRENT_IP" == "$EXTERNAL_IP" ]]; then
    logger_own INFO "$HOSTNAME $TYPE record is up-to-date with the current external IP $EXTERNAL_IP"
    return
  fi

  logger_own INFO "Updating $HOSTNAME $TYPE record to $EXTERNAL_IP with a TTL of $TTL"

  if [[ -z $DNS_RECORDS_RESPONSE ]]; then
    get_dns_records
  fi
  

  RECORD=$(echo $DNS_RECORDS_RESPONSE | jq ".result[]  | select(.name == \"$HOSTNAME\" and .type ==\"$TYPE\")" --raw-output)
  BODY=$(jq -n --arg type "$TYPE" --arg hostname "$HOSTNAME" --arg externalIp "$EXTERNAL_IP" --arg ttl $TTL '
  {
    "type": $type,
    "name": $hostname,
    "content": $externalIp,
    "ttl": $ttl|tonumber
  }')

  if [[ -n "${RECORD:-}" ]]; then
    RECORD_ID=$(echo $RECORD | jq ".id" --raw-output)
    logger_own INFO "Updating record $RECORD_ID for $HOSTNAME with value $EXTERNAL_IP"

    RESPONSE=$(curl -X PUT -s --data "$BODY" "$API/zones/$ZONE_ID/dns_records/$RECORD_ID" \
      --header "Authorization: Bearer $ACCESS_TOKEN" \
      --header "Content-Type:application/json"
    )

    if [[ $(echo $RESPONSE | jq ".success" --raw-output) != "true" ]]; then
      logger_own ERROR "There was a problem updating $HOSTNAME entry, response code was $(echo $RESPONSE | jq '.errors[0] | .code' --raw-output)"
      exit
    fi

  else
    logger_own INFO "Creating new entry for $HOSTNAME with value $EXTERNAL_IP"

    RESPONSE=$(curl -X POST -s --data "$BODY" "$API/zones/$ZONE_ID/dns_records" \
      --header "Authorization: Bearer $ACCESS_TOKEN" \
      --header "Content-Type:application/json"
    )

    if [[ $(echo $RESPONSE | jq ".success" --raw-output) != "true" ]]; then
      logger_own ERROR "There was a problem creating $HOSTNAME entry, response code was $(echo $RESPONSE | jq '.errors[0] | .code' --raw-output)"
      exit
    fi
  fi

  NEW_RECORD_TYPE=$(echo $RESPONSE | jq ".result | .type" --raw-output)
  NEW_RECORD_HOSTNAME=$(echo $RESPONSE | jq ".result | .name" --raw-output)
  NEW_RECORD_VALUE=$(echo $RESPONSE | jq ".result | .content" --raw-output)
  NEW_RECORD_TTL=$(echo $RESPONSE | jq ".result | .ttl" --raw-output)

  if [[ $NEW_RECORD_TYPE != $TYPE ]] || [[ $NEW_RECORD_HOSTNAME != $HOSTNAME ]] || [[ $NEW_RECORD_VALUE != $EXTERNAL_IP ]] || [[ $NEW_RECORD_TTL != $TTL ]]; then
    logger_own ERROR "There was a problem creating the new entry, some values did not match"
    exit
  fi

  logger_own INFO "Successfully updated $HOSTNAME $TYPE record to $EXTERNAL_IP with a TTL of $TTL"
}

update_ip 4
update_ip 6
